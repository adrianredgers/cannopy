/*      EBP.h               AGCR            27/8/92                         *//* Adrian Redgers created and reserves all rights to, but accepts no		*//* responsibility for, this file.                                           *//*																			*//*  Offers of jobs or money gratefully recieved at:							*//*          28A Clarendon Road, London SW19 2DU, UK.						*//*          Tel: (081) 543 1748                                             *//*    Header file for Error Back Propagation (EBP) routines.      Particular eg: neural network controller - Widrow's truck backer-upper.    References    ==========    Parallel Distributed Processing (vol 1), D E Rumelhart and J L McClelland,     MIT Press 1986        Sun Annual Lecture on Computer Science, G E Hinton, July 1989,    Dept. of Comp. Sci., Univ. of Manchester.    Neural Nets for Robotics and Control    Neural Nets for Control    Widrow ref.   "Building a Random Number Generator", Wichman, B., Hill, D., Byte,    pp 127-128 , March 1987    (also Numerical Recipes in C, and Knuth's Algorithms Vol 2)  */#include <stdio.h>#include <math.h>#include <time.h>/* 'when to update' flags */#define BY_EPOCH    1                       /* at the end of every epoch    */#define BY_EXAMPLE  2                       /* with each example            */#define EmuWeightFile   "EmuWei.dat"    /* files to put weights in      */#define ConWeightFile   "ConWei.dat"    /* after they've learnt         */#define EMU         1                       /* signals to say which         */#define CON         2                       /* device to use                */#define PLANT       3/* structures to save gigantic argument lists or (gasp) global variables */struct Args{ /* arguments for squashing functions and their differentials */    double y;                               /* previous output              */    double x;                               /* sum of weighted inputs       */    double grad;                            /* gradient of ramp threshold   */    double lim;                             /* limits of    "      "        */};    struct EBPNet{ /* structure for implementing Error Back Prop on multi-layer perceptron */    /* topology and parameters */    int layers;                             /* includes 'input' layer       */    int *nodesPerLayer;                     /* doesn't include biases       */    int maxNodesPerLayer;    int biasPresent;                        /* 1 if using biases else 0     */    int update;                             /* BY_EXAMPLE or BY_EPOCH       */      double learnRate;                       /* default 0.1 (hahahahahaha)   */    double momLearn;                        /*  learning rate for momentum  */    double (*squash)();                     /* squashing function           */    double (*dSquash)();                    /* differential of squash()     */    struct Args args;                       /* for passing arguments        */        /* internal variables */    int numInputs;                          /* input nodes in layer 0       */    int numOutputs;                         /* outputs in layer 'layers-1'  */    double *desired;                        /* desired output pattern       */    double **outputY;                       /* actual outputs of nodes      */    double **sumX;                          /* weighted sums before squash  */    double ***weight;                       /* w[upLayer][fromUp][toDown]   */    double *alpha;                          /* dE/dy 's                     */    double *beta;                           /* dE/dX 's                     */    double ***delta;                        /* weight changes               */    double ***momentum;                     /* momentum terms               */};/* system functions */void printf(const char *format, ...);  void fprintf(FILE *fPtr, const char *format, ...);  FILE *fopen(const char *fName, const char *mode);void fclose(FILE *fPtr);void *malloc(int nBytes);void scanf(const char *format, ...);void fscanf(FILE *fPtr, const char *format, ...);void fflush(FILE *fPtr);/* utilities */void SeedRandoms(int seed);         double RanDouble(double lo, double hi);void Ack(char *mess);void TestOpen(const char *fName, const char *mode);/* set up and display */void SetUpNetwork(struct EBPNet *theNet, int whichNet);void SetRandWeights(struct EBPNet *theNet);void ShowWeights(struct EBPNet *theNet);void SaveWeights(struct EBPNet *theNet, char *fName);void LoadWeights(struct EBPNet *theNet, char *fName);void PrintResponse(struct EBPNet *theNet, double err, int try, int traj, int epoch, int point);void PrintToFile(struct EBPNet *theNet, double err, int try, int traj, int epoch, int point);/* the plant and its differential */void LoadInState(double *inState, double *outState, int epoch, int set);   void LoadGoal(double *goal);int PlantFunction(double *inState, double *outState);void DiffPlantFunction(double *inState, double *outState, double *desired, /* CONT */ double *alph);int CheckWithinBounds(double *outState);/* prop and back-prop */double Propagate(struct EBPNet *theNet);void BackProp(struct EBPNet *theNet);void EpochUpdate(struct EBPNet *theNet);    /* squashing functions and their differentials */double ExpSigmoid(struct Args theArgs);     /* 1/1+exp(-x) sigmoid          */double DiffExpSigmoid(struct Args theArgs); /* differential = y*(1-y)       */double RampThresh(struct Args theArgs);     /* ramp threshold               */double DiffRampThresh(struct Args theArgs); /* differential = block delta   */double Tanh(struct Args theArgs);           /* y = tanh(x)                  */double DiffTanh(struct Args theArgs);       /* differential = 1-y*y         */