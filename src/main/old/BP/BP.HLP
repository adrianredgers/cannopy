/*		bp.cfg		Configuration file for Back-prop algorithm. 		*/

/*	*************************************************************************************	


	Introduction - Error Back Propagation Algorithm
	===============================================
	
	This is an example of a configuration file for the BP project.
	
	If a NULL string is given to the function BP() by the application shell then the
	the function looks for the default configuration file "bp.cfg".

	To use a particular configuration file its name (e.g. "bp_foo.cfg") should be
	specified as a parameter to the function BP(). 
	  
	- In the case of an LTS (Learning Trading System) application, use the construction:

			bp_config "bp_foo.cfg"      
		
	in its configuration file (which will typically be called "applic.cfg").		

	
	Specifiying the neural network and the back propagation algorithm
	=================================================================			
	The BP program's running parameters can be grouped into two parts:
		* topology of the neural network.
			- IMPORTANT   The top layer, i.e. the output layer, is layer 1 
						  Layers and neurons are numbered from 1 (not from zero)

		  	- Need to specify:
		  		Number of layers in the network.
		  		The activation function for each node above the input layer.
		  		Whether or not bias units are to be used.
				The source of the initial weights (from a file or random).
				Where to store the final weights.
		
		* back-prop algorithm parameters.
		  	- Need to specify:
		  		The learning rate, and optional momentum term and 'increasing' flag.   
		  		Whether weights are updated after each training example (stochastic) or
		  		  at the end of the training set (batch).
                Stopping conditions - number of iterations, minimum error.


	Format of a configuration file
	==============================
	A configuration file consists of words and numbers separated by white space (spaces, 
	tabs, and carriage returns). Inverted commas surrounding words are ignored 
	- i.e. file-name paths can be specified with or without inverted commas.

	All alphabetical items are changed to upper case before being parsed.	
	
	
	Comments
	========
	Comment statements are denoted by the usual C comment delimiters. These should be 
	separated by white space from any other words. This whole explanation is an example of
	such a comment.


	Constructions
	=============
	Other parameters are specified by various 'constructions', which start with a particular
	keyword followed by qualifiers. For example the 'layer' construction is:
	
		layer 1 nodes 5


	The keywords denoting constructions are:
	
		layers , layer , node , bias ,
		err_limit , max_iterations , 
		update , learning_rate , weights 
		 

	The following keywords are used within constructions: 
	
		functions , nodes , function , 
		momentum , increasing , batch , stochastic ,
		random , infile , outfile 


	The following activation functions are available:

		sigmoid , tanh , tanh2, tanh3 , tanh4 , step , identity 
	[where 2tanh = 2*tanh(x) , 3tanh = 3*tanh(x) , 4tanh = 4*tanh(x) ]
			

	Floating point numbers, integers and file-name paths will also be required.


	This example
	============
	The use of these constructors is illustrated by example below. Alternative forms of 
	a construction are shown by a commented construction begginning with 'OR'  
	
		- delete the OR and the comment delimiters to use the alternative form
		  of the construction (don't forget to comment out the original version). 
	
	***************************************************************************************	*/


	                                /* ****************************************************	*/
	                                /*                                                		*/
									/*	Network topology parameters.						*/ 
									/*	============================  						*/
	                                /*                                                		*/
                                   	/*                                                    	*/
layers 3							/* 	Define the number of layers in the network     		*/
									/*	This includes the input layer which doesn't have  	*/
									/* 	any weights or nodal activation functions. 			*/   
		                          	/* OR	layers 3 functions tanh 						*/  
									/* 	The alternative form ^^^^^ sets up the 'tanh'    	*/
									/*	function as the default activation function for		*/
									/*	the nodes in the network.                          	*/
									/*	  i.e. every node in the network will have this  	*/
									/*		    activation function unless it is          	*/
									/*	       over-ridden during a subsequent 'layer'  	*/
									/*	       or 'node' construction.  					*/
	                               	/*														*/
									/* Currently the available activation functions are:  	*/
	                                /*                                                     	*/
									/*	'tanh',                                            	*/
									/*	'2tanh' [ =2*tanh(x) ]                            	*/
									/*	'3tanh' [ =3*tanh(x) ]                            	*/
									/*	'4tanh' [ =4*tanh(x) ]                          	*/
									/*	'sigmoid' [ =1/(1+exp(-x) ]                      	*/
									/*	'identity' [ = x ]                               	*/
									/*	'step'  [ = +1 if x > LIM,                       	*/
									/*	 		  = -1 if x< -LIM                       	*/
									/*	 		  = x/LIM otherwise (LIM is set to 0.1)] 	*/
	                              	/*                                                    	*/
                                  	/*	                                                 	*/
									/*  Specify the number of nodes in each layer. 			*/  
									/*	===========================================			*/  
									/*                                                     	*/
									/*	NOTE that the difference between the keywords:     	*/
									/*		'layer' 	and 'layers'                      	*/
									/*		'node'  	and 'nodes',                      	*/
									/*		'function' 	and 'functions'                   	*/
									/*	is important.       								*/
                                  	/*                                                     	*/
                                   	/*														*/
layer 1 nodes 1						/* 	Specify number of nodes in the top or input layer, 	*/
									/*	which is layer 1. 									*/
				 					/* OR 	layer 1 nodes 1 functions sigmoid 				*/
									/* 	The alternative form ^^^^^^ sets up the sigmoid  	*/
									/*	activation function as the default for nodes in  	*/
									/*	this layer.                                      	*/
									/*	- This over-rides any default set up by a previous	*/
									/*	  'layers' construction.                           	*/
									/*	-  This "intra-layer" default can be overwritten  	*/
									/*	   by a subsequent 'node' construction.				*/
                                  	/*                                                     	*/
                                   	/*														*/
									/* 	Specify the node functions for this layer.       	*/
									/*	==========================================			*/
                                  	/*                                                     	*/
node 1 function tanh3				/*	This construction sets the activation function of	*/
									/*  node 1 in the current layer (which is layer 1).		*/
									/*	- it over-rides any previously set default       	*/
									/*	  activation functions for the network or layer.  	*/
                                  	/*                                                     	*/
									/*  Specify the other layer(s).     					*/
									/*	===========================							*/
                                  	/*                                                     	*/
layer 2 nodes 20 functions tanh    /*	Specify number of nodes in layer 2 - a hidden layer	*/
									/*	- and set their activation function	by default.		*/ 
                                  	/*                                                     	*/
							        /*	Override the above default for individual nodes in	*/
									/*	this layer.											*/
									/*														*/
layer 3 nodes 5					/*	Specify the number of nodes in the input layer.		*/
                                  	/*                                                     	*/
									/* 	The input or bottom layer doesn't have any  		*/
									/* 	activation functions (or weights for that matter).	*/
									/*														*/
									/*														*/
bias yes							/* 	Specifiy whether to use bias units in all layers 	*/
									/*	except the top one).								*/
									/* OR 	bias no  						   				*/
									/*														*/
									/*														*/
									/* 	Parameters for the back-propagation algorithm.		*/ 
									/*	==============================================		*/
									/*														*/
learn_rate 0.001 momentum 0.2		/* 	Specify the value of the learning rate, and also	*/ 
									/*	specify that a momentum term is to be used, and 	*/
									/*	its value.											*/
									/* OR 	lean_rate 0.02     								*/
									/* OR	learn_rate 0.02 increasing						*/
									/* OR	learn_rate 0.02 increasing momentum 0.2			*/	
									/*	The alternative options ^^^^ are:                   */
									/*		to have no momentum term						*/
									/*		to slowly increase the learning rate.			*/				
									/*		both momentum term and increase learn-rate.		*/				
									/*														*/
									/*														*/
update stochastic					/*  Specify whether the update is to be at the end of  	*/
									/*	each training presentation, or at the end of each 	*/
									/*	training epoch.										*/
									/*	OR	update batch									*/
									/*														*/
									/*														*/
error_limit 0.0001					/*  Specify an error limit as a stopping criterion for	*/
									/*	an experiment.  									*/								
				         			/*	Default error limit = 0.0 if this construction is 	*/ 
									/*	not present.										*/ 
									/*														*/
									/*														*/
max_iterations 100					/*  Specify that experiment will stop after this number	*/
									/*	of iterations.   									*/
					               	/* 	Default max_iterations 100000 if this construction 	*/
									/*	is not present. 									*/
									/*														*/
									/*														*/
weights random						/* 	Specify source of initial weights.			      	*/
									/* OR	 weights infile "t1.wgt" 						*/						
									/* 	Otherwise ^^^^ they mey come from a file.			*/               	
 									/*														*/
									/*														*/
weights outfile	t1.wgt				/*  Specify a file in which to save the weights at the 	*/
									/* 	end of the experiment. 								*/
									/*	Discards weights if construction is not present.	*/
									/*														*/
	                                /* ****************************************************	*/











